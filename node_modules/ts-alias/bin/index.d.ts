declare type TOptions = ({
    rootDir?: string;
} | {
    aliases: AliasList;
}) & {
    modulesDir?: string[];
    debug?: boolean;
};
export declare type AliasList = {
    [alias: string]: {
        pathnames: string[];
        exact: boolean;
    };
};
declare type TsAliasList = {
    [alias: string]: string[];
};
declare type ModuleAliasList = {
    [alias: string]: string | Function;
};
declare type TWebpackExternals = (data: {
    request: string;
}, callback: (err: undefined, result: string) => void) => void;
export default class TsAlias {
    private options;
    typescript: TsAliasList;
    list: AliasList;
    constructor(options?: TOptions);
    private readTsConfig;
    private processAliases;
    /**
     * Replace real path by alias
     * @param realpath The path you want to replace with alias
     * @param strict true to return null when no alias could be applied to the path
     */
    apply(realpath: string, strict?: false): string;
    apply(realpath: string, strict: true): string | null;
    /**
     * Check if the provided path can be shorten with aliases
     * @param filename The path to check
     * @returns If filename can be shorten an alias
     */
    isAliased(filename: string): boolean;
    realpath(request: string, strict?: false): string;
    realpath(request: string, strict: true): string | null;
    /**
     * If the provided path contains an alias
     * @param filename The path to check
     * @returns If filename contains an alias
     */
    containsAlias(filename: string): boolean;
    forWebpack(modulesPath?: string): {
        aliases: TsAliasList;
    };
    forWebpack(modulesPath: string, nodeExternals: true): {
        aliases: TsAliasList;
        externals: TWebpackExternals;
    };
    forModuleAlias(enableCache?: boolean): ModuleAliasList;
}
export {};
